{"version":3,"sources":["emotion/BlindBoard.ts","components/Common.ts","components/BlindBoard.tsx","components/BlindBoardRead.tsx","emotion/Modal.ts","components/Modal.tsx","context/ModalContext.tsx","components/Validation.ts","components/BlindBoardWrite.tsx","index.tsx"],"names":["media","map","bp","Board","css","BoardRead","BoardWrite","ButtonSet","NormalButton","TimeToString","time","now","Date","reg_time","diff","getTime","days","Math","floor","hours","listMax","BlindBoard","useState","list","setList","total","setTotal","useEffect","a","fetch","response","json","filter","v","i","GetList","id","key","data-id","to","title","length","substr","author","className","onClick","v2","i2","BlindBoardRead","match","content","setContent","params","ReadContent","ModalWrapper","ModalOverlay","Modal","props","ModalButton","history","useHistory","el","document","getElementById","dispatch","useModalDispatch","type","push","visible","ReactDOM","createPortal","children","ModalStateContext","createContext","ModalDispatchContext","Reducer","state","action","modal_type","message","Error","useContext","BlankCheck","BlindBoardWrite","inputEl","useRef","textareaEl","current","focus","Write","namelist","firstname","lastname","firstrandom","random","lastrandom","nickname","data","value","replace","method","headers","body","JSON","stringify","ref","placeholder","render","exact","path","component","useReducer","Provider"],"mappings":"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","file":"static/js/main.243d37e9.chunk.js","sourcesContent":["import { css } from '@emotion/react'\r\n\r\nconst breakpoints = [320, 568]\r\n\r\nconst media = breakpoints.map( bp => `@media (min-width: ${bp}px)` )\r\n\r\nconst Board = css`\r\n    min-width: 320px;\r\n    ${[media[0]]} { \r\n        width: 90%;\r\n        font-size: 11px;\r\n    }\r\n    ${[media[1]]} { \r\n        width: 568px;\r\n        font-size: 14px; \r\n    }\r\n    #BoardHeader{\r\n        ${[media[0]]} { height: 56px; }\r\n        ${[media[1]]} { height: 86px; }\r\n        padding: 10px;\r\n        box-sizing: border-box;\r\n        h1 {\r\n            text-align: center;\r\n        }\r\n    }\r\n    #Board{\r\n        min-height: 500px;\r\n        box-shadow: 0 0 10px #dbdbdb;\r\n        border-radius: 10px;\r\n        box-sizing: border-box;\r\n        ul { \r\n            width: 100%; \r\n            :nth-of-type(even) { background-color: #f5f5f5; }\r\n            cursor: pointer;\r\n            a { color: #000; }\r\n            &:hover {\r\n                background-color: #dbdbdb;\r\n            }\r\n        }\r\n        ul > a > li {\r\n            display: inline-block;\r\n            height: 50px;\r\n            line-height: 48px;\r\n            text-align: center;\r\n            :nth-of-type(1) { width: 60%; }\r\n            :nth-of-type(2) { width: 25%; }\r\n            :nth-of-type(3) { width: 15%; }\r\n        }\r\n        textarea{\r\n            width: 100%;\r\n            box-sizing: border-box;\r\n        }\r\n    }\r\n    #BoardFooter{\r\n        display: flex;\r\n        justify-content: center;\r\n        .material-icons.md-18 { font-size: 18px; }\r\n        .material-icons.md-36 { font-size: 36px; }\r\n        .material-icons.md-48 { font-size: 48px; }\r\n        a { text-decoration: none; }\r\n    }\r\n`\r\nconst BoardRead = css`\r\n    div:first-of-type {\r\n        font-size: 16px;\r\n        text-align: center;\r\n        border-bottom: 1px solid #dbdbdb;\r\n        padding: 10px;\r\n    }\r\n    div:nth-of-type(2) {\r\n        width: 100%;\r\n        span{\r\n            display: inline-block;\r\n            width: 50%;\r\n            border-bottom: 1px solid #dbdbdb;\r\n            padding: 10px;\r\n            box-sizing: border-box;\r\n        }\r\n        span:first-of-type {\r\n            text-align: left;\r\n        }\r\n        span:nth-of-type(2){\r\n            text-align: right;\r\n        }\r\n    }\r\n    div:last-of-type {\r\n        padding: 10px;\r\n    }\r\n`\r\nconst BoardWrite = css`\r\n    textarea {\r\n        width: 100%;\r\n        height: 415px;\r\n        border: none;\r\n        border-radius: 10px;\r\n        resize: none;\r\n        padding: 10px;\r\n        :focus {\r\n            outline: none;\r\n        }\r\n    }\r\n    div:first-of-type {\r\n        height: 40px;\r\n        border-bottom: 1px solid #dbdbdb;\r\n        input[type=text] {\r\n            width: 100%;\r\n            border-radius: 10px;\r\n            outline: none;\r\n            box-sizing: border-box;\r\n            border: none;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            padding-left: 10px;\r\n        }\r\n    }\r\n    div:nth-of-type(2) {\r\n        height: 35px;\r\n        border-bottom: 1px solid #dbdbdb;\r\n    } \r\n`\r\n\r\n\r\nconst ButtonSet = css`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    height: 36px;\r\n    border: 1px solid #dbdbdb;\r\n    border-radius: 5px;\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-width: 36px;\r\n        height: 36px;\r\n        :first-of-type{ border-right: 1px solid #dbdbdb; }\r\n        :last-of-type{ border-left: 1px solid #dbdbdb; }\r\n        cursor: pointer;\r\n        &:hover {\r\n            background-color: #dbdbdb;\r\n        }\r\n    }\r\n`\r\n\r\nconst NormalButton = css`\r\n    border-radius: 5px;\r\n    border: none;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    width: 50px;\r\n    height: 30px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #0078ff;\r\n    }\r\n`\r\n\r\nexport {\r\n    Board,\r\n    ButtonSet,\r\n    BoardRead,\r\n    BoardWrite,\r\n    NormalButton\r\n}","const TimeToString = (time: string) => {\r\n  const now: Date = new Date()\r\n  const reg_time: Date = new Date(time)\r\n  let string\r\n\r\n  let diff = now.getTime() - reg_time.getTime()\r\n  let days = Math.floor((diff / (1000 * 60 * 60 * 24)))\r\n  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n  //let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\r\n  //let seconds = Math.floor((diff % (1000 * 60)) / (1000))\r\n  if(days > 0){\r\n    string = days + '일전'\r\n  }else if(hours > 1 && days === 0){\r\n    string = hours + '시간전'\r\n  }else{\r\n    string = '방금전'\r\n  }\r\n\r\n  return string\r\n}\r\n\r\nexport default TimeToString","import React, { useState, useEffect } from 'react'\r\nimport { Board, ButtonSet } from '../emotion/BlindBoard'\r\nimport { Link } from 'react-router-dom'\r\nimport TimeToString from './Common'\r\n \r\n\r\nconst PORT = process.env.NODE_ENV === 'development' ? 3000 : 80\r\nlet listMax = 10\r\n\r\nconst BlindBoard = () => { \r\n  let [list, setList]: any = useState([])  \r\n  let [total, setTotal]: any = useState([])\r\n\r\n  useEffect(() => { \r\n    listMax = 10\r\n    const GetList = async () => {\r\n      const response = await fetch('http://localhost:3000/init')\r\n      let json = await response.json()\r\n      setTotal(json)\r\n      setList(json.filter((v: string | number, i: number) => i < listMax))\r\n    }\r\n    GetList()\r\n  }, [])\r\n\r\n  const Prev = () => {\r\n    if(listMax > 10) {\r\n      listMax -= 10\r\n      setList(total.filter((v: string | number, i: number) => i < listMax)\r\n      .filter((v2: string | number, i2: number) => i2 >= listMax - 10))\r\n    }\r\n  }\r\n\r\n  const Next = () => {\r\n    if(listMax < total.length) {\r\n      setList(total.filter((v: string | number, i: number) => i >= listMax)\r\n      .filter((v2: string | number, i2: number) => i2 < 10))\r\n      listMax += 10\r\n    }\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\">\r\n        {list.map((v: any, i:any) => (\r\n          <ul key={v.id} data-id={v.id}>\r\n            <Link to={`/read/${v.id}`}>\r\n              <li>{v.title.length > 26 ? v.title.substr(0, 20) + '...' : v.title}</li>\r\n              <li>{v.author}</li>\r\n              <li>{TimeToString(v.time)}</li>\r\n            </Link>\r\n          </ul>\r\n        ))}\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\" onClick={Prev}>chevron_left</span>\r\n          <Link to='/write'>\r\n            <span className=\"material-icons\">edit</span>\r\n          </Link>\r\n          <span className=\"material-icons\" onClick={Next}>chevron_right</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoard","import React, { useEffect, useState } from 'react'\r\nimport { Board, ButtonSet, BoardRead } from '../emotion/BlindBoard'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport TimeToString from './Common'\r\n\r\ninterface MatchParams {\r\n  id: string\r\n}\r\n\r\nconst BlindBoardRead = ({match}: RouteComponentProps<MatchParams>) => { \r\n  let [content, setContent]: any = useState([])  \r\n  useEffect(() => { \r\n    const ReadContent = async () => {\r\n      const response = await fetch('http://localhost:3000/backend/read/' + match.params.id)\r\n      let json = await response.json()\r\n      setContent(json[0])\r\n    }\r\n    ReadContent()\r\n  }, [match.params.id])\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\" css={BoardRead}>\r\n        <div>{content.title}</div>\r\n        <div>\r\n          <span>{content.author}</span>\r\n          <span>{TimeToString(content.time)}</span>\r\n        </div>\r\n        <div>\r\n          {content.content}\r\n        </div>\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardRead","import { css } from '@emotion/react'\r\nimport { NormalButton } from './BlindBoard'\r\n\r\nconst ModalWrapper = css`\r\n    text-align: center;\r\n    width: 300px;\r\n    height: 150px;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    margin-left: -150px;\r\n    margin-top: -75px;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    z-index: 1000;\r\n    border-radius: 10px;\r\n    div:first-of-type {\r\n        width: 100%;\r\n        height: 80px;\r\n        line-height: 80px;\r\n    }\r\n    div:last-of-type {\r\n        width: 100%;\r\n        height: 70px;\r\n        line-height: 70px;\r\n        button{\r\n            ${NormalButton}\r\n        }\r\n    }\r\n\r\n`\r\nconst ModalOverlay = css`\r\n    box-sizing: border-box;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    z-index: 999;\r\n`\r\nexport {\r\n    ModalWrapper, ModalOverlay\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { ModalWrapper, ModalOverlay } from '../emotion/Modal'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useModalDispatch } from '../context/ModalContext'\r\n\r\nconst Modal = (props: any) => {\r\n\r\n    let history = useHistory()\r\n    let ModalButton: any\r\n    const el = document.getElementById(\"modal-root\")\r\n    const dispatch = useModalDispatch()\r\n\r\n    const Route = (props: any) => {\r\n        return <button onClick={()=> history.push('/')}>확인</button>\r\n    }\r\n\r\n    const Normal = (props: any) => {\r\n        return <button onClick={()=> dispatch({ type: 'SET_VISIBLE', visible: false })}>확인</button>\r\n    }\r\n\r\n    switch(props.type) {\r\n        case 'Route':\r\n            ModalButton = Route\r\n        break\r\n        case 'Normal':\r\n            ModalButton = Normal\r\n    }\r\n\r\n    return el ? ReactDOM.createPortal(\r\n        props.visible?\r\n        <div>\r\n            <div css={ModalOverlay}></div>\r\n            <div css={ModalWrapper}>\r\n                <div>{props.children}</div>\r\n                <div><ModalButton /></div>\r\n            </div>\r\n        </div>\r\n        : null, el\r\n    ) : null\r\n\r\n}\r\n\r\nexport default Modal","import React, { useReducer, useContext, createContext, Dispatch } from 'react'\r\nimport Modal from '../components/Modal'\r\n\r\ntype State = {\r\n  visible: boolean\r\n  modal_type: string,\r\n  message: string\r\n}\r\n\r\ntype Action =\r\n  | { type: 'SET_MODAL_TYPE'; modal_type: string }\r\n  | { type: 'SET_MESSAGE'; message: string }\r\n  | { type: 'SET_VISIBLE'; visible: boolean }\r\n\r\ntype ModalDispatch = Dispatch<Action>\r\n\r\nconst ModalStateContext = createContext<State | null>(null)\r\nconst ModalDispatchContext = createContext<ModalDispatch | null>(null)\r\n\r\nconst Reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'SET_MODAL_TYPE':\r\n      return {\r\n        ...state,\r\n        modal_type: action.modal_type \r\n      }\r\n    case 'SET_MESSAGE':\r\n      return {\r\n        ...state,\r\n        message: action.message \r\n      }\r\n    case 'SET_VISIBLE':\r\n      return {\r\n        ...state,\r\n        visible: action.visible\r\n      }\r\n    default:\r\n      throw new Error('Unhandled action')\r\n  }\r\n}\r\n\r\nexport function ModalProvider({ children }: { children: React.ReactNode }) {\r\n  let [state, dispatch] = useReducer(Reducer, {\r\n    modal_type: 'Normal',\r\n    message: '',\r\n    visible: false\r\n  })\r\n\r\n  return (\r\n    <ModalStateContext.Provider value={state}>\r\n      <ModalDispatchContext.Provider value={dispatch}>\r\n        <Modal type={state.modal_type} visible={state.visible}>{state.message}</Modal>{children}\r\n      </ModalDispatchContext.Provider>\r\n    </ModalStateContext.Provider>\r\n  )\r\n}\r\n\r\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\r\nexport function useModalState() {\r\n  const state = useContext(ModalStateContext)\r\n  if (!state) throw new Error('Cannot find ModalProvider')\r\n  return state\r\n}\r\n\r\nexport function useModalDispatch() {\r\n  const dispatch = useContext(ModalDispatchContext)\r\n  if (!dispatch) throw new Error('Cannot find ModalProvider')\r\n  return dispatch\r\n}","let flag: boolean\r\n\r\nconst BlankCheck = (content: string | undefined) => {\r\n    content?.length === 0 ? flag = false : flag = true\r\n    return flag\r\n}\r\n  \r\nexport default BlankCheck","import React, { useEffect, useRef } from 'react'\r\nimport { Board, ButtonSet, BoardWrite } from '../emotion/BlindBoard'\r\nimport { Link } from 'react-router-dom'\r\nimport { useModalDispatch } from '../context/ModalContext'\r\nimport BlankCheck from './Validation'\r\n\r\nconst PORT = process.env.NODE_ENV === 'development'? 3000 : 80\r\n\r\nconst BlindBoardWrite = () => { \r\n\r\n  const dispatch = useModalDispatch()\r\n\r\n  const inputEl = useRef<HTMLInputElement>(null)\r\n  const textareaEl = useRef<HTMLTextAreaElement>(null)\r\n\r\n  useEffect(() => { \r\n    inputEl.current?.focus()\r\n  }, [inputEl])\r\n\r\n  const Write = async () => {\r\n    \r\n    const namelist = {\r\n      firstname: ['작은', '큰', '귀여운', '푸른', '붉은', '파란', '바보', '멍청한', '미친', '아기', '강철의'],\r\n      lastname: ['곰', '상자', '뱀', '상어', '닝겐', '사람', '연금술사', '소보루', '멍청이', '아빠', '부장님']\r\n    }\r\n    const firstrandom = Math.floor(Math.random() * (namelist.firstname.length - 0) + 0)\r\n    const lastrandom = Math.floor(Math.random() * (namelist.lastname.length - 0) + 0)\r\n    const nickname = namelist.firstname[firstrandom] + ' ' + namelist.lastname[lastrandom]\r\n\r\n    type Data = {\r\n      title: string | undefined,\r\n      author: string | undefined,\r\n      content: string | undefined\r\n    }\r\n\r\n    const data: Data = {\r\n      title: inputEl.current?.value.replace(/'/g, \"\\\\'\"),\r\n      author: nickname,\r\n      content: textareaEl.current?.value.replace(/'/g, \"\\\\'\")\r\n    }\r\n\r\n    if(!BlankCheck(data.title) || !BlankCheck(data.content)){\r\n      dispatch({ type: 'SET_VISIBLE', visible: true })\r\n      dispatch({ type: 'SET_MODAL_TYPE', modal_type: 'Normal' })\r\n      dispatch({ type: 'SET_MESSAGE', message: '내용을 입력하지 않았습니다..😅' })\r\n      return false\r\n    }\r\n\r\n    const response = await fetch('http://localhost:3000/backend/write', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n\r\n    const result = await response.json()\r\n    if(result.message === 'success') {\r\n      dispatch({ type: 'SET_VISIBLE', visible: true })\r\n      dispatch({ type: 'SET_MODAL_TYPE', modal_type: 'Route' })\r\n      dispatch({ type: 'SET_MESSAGE', message: '작성이 완료되었습니다😀' })\r\n    }\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\" css={BoardWrite}>\r\n        <div>\r\n          <input ref={inputEl} type=\"text\" placeholder=\"제목을 입력하세요\"/>\r\n        </div>\r\n        <div>\r\n\r\n        </div>\r\n        <div>\r\n          <textarea placeholder=\"내용을 작성해주세요\" ref={textareaEl}></textarea>\r\n        </div>\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\" onClick={Write}>create</span>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardWrite","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport BlindBoard from './components/BlindBoard'\r\nimport BlindBoardRead from './components/BlindBoardRead'\r\nimport BlindBoardWrite from './components/BlindBoardWrite'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\nimport { ModalProvider } from './context/ModalContext'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path='/' component={BlindBoard} />\r\n      <ModalProvider>\r\n        <Route path='/read/:id' component={BlindBoardRead} />\r\n        <Route path='/write' component={BlindBoardWrite} />\r\n      </ModalProvider>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  ,document.getElementById('root')\r\n)"],"sourceRoot":""}