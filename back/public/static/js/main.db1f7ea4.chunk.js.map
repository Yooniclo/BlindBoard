{"version":3,"sources":["emotion/BlindBoard.js","components/BlindBoard.tsx","components/BlindBoardRead.tsx","index.tsx"],"names":["media","map","bp","Board","css","ButtonSet","BlindBoard","listMax","history","useState","list","setList","useEffect","a","fetch","response","json","filter","v","i","GetList","id","key","data-id","to","title","length","substr","author","time","now","Date","reg_time","diff","getTime","days","Math","floor","hours","TimeToString","className","defaultProps","BlindBoardRead","ReadContent","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"mLAEA,IAEMA,EAFc,CAAC,IAAK,KAEAC,KAAK,SAAAC,GAAE,mCAA0BA,EAA1B,UAE3BC,EAAQC,YAAH,mBAEL,CAACJ,EAAM,IAFF,8BAML,CAACA,EAAM,IANF,6CAWG,CAACA,EAAM,IAXV,iBAYG,CAACA,EAAM,IAZV,8qBAyDLK,EAAS,oV,OChCTC,EAAa,SAAC,EAAD,GAA0C,IAAxCC,EAAuC,EAAvCA,QAAuC,KAAlBC,QAEbC,mBAAS,KAFsB,mBAErDC,EAFqD,KAE/CC,EAF+C,KAI1DC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,8BADf,cACRC,EADQ,gBAEGA,EAASC,OAFZ,OAEVA,EAFU,OAGdL,EAAQK,EAAKC,QAAO,SAACC,EAAqBC,GAAtB,OAAoCA,EAAIZ,MAH9C,2CAAH,qDAKba,KACC,IAMH,OACE,mBAAKC,GAAG,aAAajB,IAAKD,GACxB,mBAAKkB,GAAG,eACN,wFAEF,mBAAKA,GAAG,SACLX,EAAKT,KAAI,SAACiB,EAAQC,GAAT,OACR,kBAAIG,IAAKJ,EAAEG,GAAIE,UAASL,EAAEG,IACxB,YAAC,IAAD,CAAMG,GAAE,gBAAWN,EAAEG,KACnB,sBAAKH,EAAEO,MAAMC,OAAS,GAAKR,EAAEO,MAAME,OAAO,EAAG,IAAM,MAAQT,EAAEO,OAC7D,sBAAKP,EAAEU,QACP,sBAnDO,SAACC,GACpB,IAAMC,EAAY,IAAIC,KAChBC,EAAiB,IAAID,KAAKF,GAG5BI,EAAOH,EAAII,UAAYF,EAASE,UAChCC,EAAOC,KAAKC,MAAOJ,EAAI,OACvBK,EAAQF,KAAKC,MAAOJ,EAAI,MAAL,MAWvB,OARGE,EAAO,EACCA,EAAO,eACTG,EAAQ,GAAc,IAATH,EACXG,EAAQ,qBAER,qBAoCMC,CAAarB,EAAEW,aAK5B,mBAAKR,GAAG,eACN,mBAAKjB,IAAKC,GACR,oBAAMmC,UAAU,kBAAhB,gBACA,oBAAMA,UAAU,kBAAhB,QACA,oBAAMA,UAAU,kBAAhB,qBAQVlC,EAAWmC,aAAe,CACxBlC,QAAS,IAGID,QC5CAoC,EAhCQ,WAAO,IAAD,EAEAjC,mBAAS,IAFT,6BAY3B,OARAG,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACKC,MAAM,8BADX,cACZC,EADY,gBAEDA,EAASC,OAFR,yDAAH,qDAIjB2B,KACC,IAGD,mBAAKtB,GAAG,aAAajB,IAAKD,GACxB,mBAAKkB,GAAG,eACN,wFAEF,mBAAKA,GAAG,UAGR,mBAAKA,GAAG,eACN,mBAAKjB,IAAKC,GACR,YAAC,IAAD,CAAMmB,GAAG,KACP,oBAAMgB,UAAU,kBAAhB,a,OCrBZI,IAASC,OACP,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1C,IACjC,YAAC,IAAD,CAAOyC,KAAK,QAAQC,UAAWN,MAGlCO,SAASC,eAAe,W","file":"static/js/main.db1f7ea4.chunk.js","sourcesContent":["import { css } from '@emotion/core'\r\n\r\nconst breakpoints = [320, 568]\r\n\r\nconst media = breakpoints.map( bp => `@media (min-width: ${bp}px)` )\r\n\r\nconst Board = css`\r\n    min-width: 320px;\r\n    ${[media[0]]} { \r\n        width: 90%;\r\n        font-size: 11px;\r\n    }\r\n    ${[media[1]]} { \r\n        width: 568px;\r\n        font-size: 14px; \r\n    }\r\n        #BoardHeader{\r\n            ${[media[0]]} { height: 56px; }\r\n            ${[media[1]]} { height: 86px; }\r\n            padding: 10px;\r\n            box-sizing: border-box;\r\n            h1 {\r\n                text-align: center;\r\n            }\r\n        }\r\n        #Board{\r\n            min-height: 540px;\r\n            box-shadow: 0 0 10px #dbdbdb;\r\n            border-radius: 10px;\r\n            box-sizing: border-box;\r\n            ul { \r\n                width: 100%; \r\n                :nth-of-type(even) { background-color: #f5f5f5; }\r\n                cursor: pointer;\r\n                a { color: #000; }\r\n                &:hover {\r\n                    background-color: #dbdbdb;\r\n                }\r\n            }\r\n            ul > a > li {\r\n                display: inline-block;\r\n                height: 50px;\r\n                line-height: 48px;\r\n                text-align: center;\r\n                :nth-of-type(1) { width: 60%; }\r\n                :nth-of-type(2) { width: 25%; }\r\n                :nth-of-type(3) { width: 15%; }\r\n            }\r\n            textarea{\r\n                width: 100%;\r\n                box-sizing: border-box;\r\n            }\r\n        }\r\n        #BoardFooter{\r\n            display: flex;\r\n            justify-content: center;\r\n            .material-icons.md-18 { font-size: 18px; }\r\n            .material-icons.md-36 { font-size: 36px; }\r\n            .material-icons.md-48 { font-size: 48px; }\r\n            a { text-decoration: none; }\r\n        }\r\n`\r\n\r\nconst ButtonSet = css`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    height: 36px;\r\n    border: 1px solid #dbdbdb;\r\n    border-radius: 5px;\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-width: 36px;\r\n        height: 36px;\r\n        :first-of-type{ border-right: 1px solid #dbdbdb; }\r\n        :last-of-type{ border-left: 1px solid #dbdbdb; }\r\n        cursor: pointer;\r\n        &:hover {\r\n            background-color: #dbdbdb;\r\n        }\r\n    }\r\n`\r\n\r\nexport {\r\n    Board,\r\n    ButtonSet\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Board, ButtonSet } from '../emotion/BlindBoard'\r\nimport { Link } from 'react-router-dom'\r\n \r\ninterface BoardRow {\r\n  listMax: number\r\n}\r\n\r\nconst TimeToString = (time: string) => {\r\n  const now: Date = new Date()\r\n  const reg_time: Date = new Date(time)\r\n  let string\r\n\r\n  let diff = now.getTime() - reg_time.getTime()\r\n  let days = Math.floor((diff / (1000 * 60 * 60 * 24)))\r\n  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n  //let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\r\n  //let seconds = Math.floor((diff % (1000 * 60)) / (1000))\r\n  if(days > 0){\r\n    string = days + '일전'\r\n  }else if(hours > 1 && days === 0){\r\n    string = hours + '시간전'\r\n  }else{\r\n    string = '방금전'\r\n  }\r\n\r\n  return string\r\n}\r\n\r\nconst PORT = process.env.NODE_ENV === 'development'? 3000 : 80\r\n\r\nconst BlindBoard = ({listMax}: BoardRow, {history}: any) => { \r\n\r\n  let [list, setList]: any = useState([])  \r\n\r\n  useEffect(() => { \r\n    const GetList = async () => {\r\n      const response = await fetch('http://localhost:3000/init')\r\n      let json = await response.json()\r\n      setList(json.filter((v: string | number , i: number) => i < listMax))\r\n    }\r\n    GetList()\r\n  }, [])\r\n  \r\n  const GetContent = (e: React.MouseEvent<HTMLUListElement>) => {\r\n    console.log(e.currentTarget.dataset.id)\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\">\r\n        {list.map((v: any, i:any) => (\r\n          <ul key={v.id} data-id={v.id}>\r\n            <Link to={`/read/${v.id}`}>\r\n              <li>{v.title.length > 26 ? v.title.substr(0, 20) + '...' : v.title}</li>\r\n              <li>{v.author}</li>\r\n              <li>{TimeToString(v.time)}</li>\r\n            </Link>\r\n          </ul>\r\n        ))}\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\">chevron_left</span>\r\n          <span className=\"material-icons\">edit</span>\r\n          <span className=\"material-icons\">chevron_right</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nBlindBoard.defaultProps = {\r\n  listMax: 10\r\n}\r\n\r\nexport default BlindBoard","import React, { useEffect, useState } from 'react'\r\nimport { Board, ButtonSet } from '../emotion/BlindBoard'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst BlindBoardRead = () => { \r\n  \r\n  let [list, setList]: any = useState([])  \r\n\r\n  useEffect(() => { \r\n    const ReadContent = async () => {\r\n      const response = await fetch('http://localhost:3000/init')\r\n      let json = await response.json()\r\n    }\r\n    ReadContent()\r\n  }, [])\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\">\r\n \r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardRead","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport BlindBoard from './components/BlindBoard'\r\nimport BlindBoardRead from './components/BlindBoardRead'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path='/' component={BlindBoard} />\r\n      <Route path='/read' component={BlindBoardRead} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n  ,document.getElementById('root')\r\n)"],"sourceRoot":""}