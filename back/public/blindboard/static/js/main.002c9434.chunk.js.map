{"version":3,"sources":["emotion/BlindBoard.ts","components/Common.ts","components/BlindBoard.tsx","emotion/Modal.ts","components/Validation.ts","components/BlindBoardRead.tsx","components/Modal.tsx","context/ModalContext.tsx","context/TokenContext.tsx","components/BlindBoardWrite.tsx","components/BlindBoardSignin.tsx","index.tsx"],"names":["media","map","bp","Board","css","BoardRead","BoardWrite","ButtonSet","NormalButton","KakaoButton","ReplyFloatingButton","TimeToString","time","now","Date","reg_time","diff","getTime","days","Math","floor","hours","listMax","BlindBoard","useState","list","setList","total","setTotal","useEffect","a","fetch","process","response","json","filter","v","i","GetList","id","key","data-id","to","title","length","substr","author","className","onClick","v2","i2","ModalWrapper","ModalOverlay","ReplyModalWrapper","BlankCheck","content","BlindBoardRead","match","setContent","reply_count","setReplyCount","reply_contents","setReplyContents","visible","setVisible","add_reply_content","setAddReplyContent","textareaEl","useRef","ReadContent","params","ReplyCount","count","OpenReplyModal","ReplyWrite","namelist","firstname","lastname","firstrandom","random","lastrandom","nickname","data","list_id","Number","current","value","replace","textarea","document","querySelector","animation_count","rotate_count","flag","run","style","transform","requestAnimationFrame","method","headers","body","JSON","stringify","message","CloseReplyModal","placeholder","ref","Modal","props","ModalButton","history","useHistory","el","getElementById","dispatch","useModalDispatch","MoveRoute","type","push","ReactDOM","createPortal","children","ModalStateContext","createContext","ModalDispatchContext","Reducer","state","action","modal_type","Error","useContext","TokenStateContext","TokenDispatchContext","token","BlindBoardWrite","inputEl","focus","Write","useTokenState","BlindBoardSignin","useTokenDispatch","onSuccess","res","access_token","onFail","console","error","onLogout","info","render","basename","useReducer","Provider","exact","path","component"],"mappings":"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","file":"static/js/main.002c9434.chunk.js","sourcesContent":["import { css } from '@emotion/react'\r\n\r\nconst breakpoints = [320, 568]\r\n\r\nconst media = breakpoints.map( bp => `@media (min-width: ${bp}px)` )\r\n\r\nconst Board = css`\r\n    .material-icons.md-18 { font-size: 18px; }\r\n    .material-icons.md-36 { font-size: 36px; }\r\n    .material-icons.md-48 { font-size: 48px; }\r\n    min-width: 320px;\r\n    ${media[0]} { \r\n        width: 90%;\r\n        font-size: 11px;\r\n    }\r\n    ${media[1]} { \r\n        width: 568px;\r\n        font-size: 14px; \r\n    }\r\n    #BoardHeader{\r\n        ${media[0]} { height: 56px; }\r\n        ${media[1]} { height: 86px; }\r\n        padding: 10px;\r\n        box-sizing: border-box;\r\n        h1 {\r\n            text-align: center;\r\n        }\r\n    }\r\n    #Board{\r\n        min-height: 480px;\r\n        box-shadow: 0 0 10px #dbdbdb;\r\n        border-radius: 10px;\r\n        box-sizing: border-box;\r\n        ul { \r\n            width: 100%; \r\n            :nth-of-type(even) { background-color: #f5f5f5; }\r\n            cursor: pointer;\r\n            a { color: #000; }\r\n            &:hover {\r\n                background-color: #dbdbdb;\r\n            }\r\n        }\r\n        ul > a > li {\r\n            display: inline-block;\r\n            height: 48px; \r\n            line-height: 48px;\r\n            text-align: center;\r\n            :nth-of-type(1) { width: 60%; }\r\n            :nth-of-type(2) { width: 25%; }\r\n            :nth-of-type(3) { width: 15%; }\r\n        }\r\n        textarea{\r\n            width: 100%;\r\n            box-sizing: border-box;\r\n        }\r\n    }\r\n    #BoardFooter{\r\n        display: flex;\r\n        width: 100%;\r\n        justify-content: center;\r\n        a { text-decoration: none; }\r\n    }\r\n`\r\nconst BoardRead = css`\r\n    .content-title {\r\n        font-size: 16px;\r\n        text-align: center;\r\n        border-bottom: 1px solid #dbdbdb;\r\n        padding: 10px;\r\n    }\r\n    .content-body {\r\n        width: 100%;\r\n        span{\r\n            display: inline-block;\r\n            width: 50%;\r\n            border-bottom: 1px solid #dbdbdb;\r\n            padding: 10px;\r\n            box-sizing: border-box;\r\n        }\r\n        span:first-of-type {\r\n            text-align: left;\r\n        }\r\n        span:nth-of-type(2){\r\n            text-align: right;\r\n        }\r\n    }\r\n    div:nth-of-type(3) {\r\n        height: 394px;\r\n        box-sizing: border-box;\r\n        padding: 10px;\r\n        position: relative;\r\n        overflow: auto;\r\n    }\r\n`\r\nconst BoardWrite = css`\r\n    textarea {\r\n        width: 100%;\r\n        height: 399px;\r\n        border: none;\r\n        border-radius: 10px;\r\n        resize: none;\r\n        padding: 10px;\r\n        :focus {\r\n            outline: none;\r\n        }\r\n    }\r\n    div:first-of-type {\r\n        height: 40px;\r\n        border-bottom: 1px solid #dbdbdb;\r\n        input[type=text] {\r\n            width: 100%;\r\n            border-radius: 10px;\r\n            outline: none;\r\n            box-sizing: border-box;\r\n            border: none;\r\n            height: 40px;\r\n            line-height: 40px;\r\n            padding-left: 10px;\r\n        }\r\n    }\r\n    div:nth-of-type(2) {\r\n        height: 35px;\r\n        border-bottom: 1px solid #dbdbdb;\r\n    } \r\n`\r\n\r\n\r\nconst ButtonSet = css`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    height: 36px;\r\n    border: 1px solid #dbdbdb;\r\n    border-radius: 5px;\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-width: 36px;\r\n        height: 36px;\r\n        cursor: pointer;\r\n        &:hover {\r\n            background-color: #dbdbdb;\r\n        }\r\n        ::selection {\r\n            background-color: #fff;\r\n        }\r\n    }\r\n`\r\n\r\nconst NormalButton = css`\r\n    border-radius: 5px;\r\n    border: none;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    width: 50px;\r\n    height: 30px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #0078ff;\r\n    }\r\n`\r\nconst KakaoButton = css`\r\n    p {\r\n        text-align: center;\r\n        font-size: 16px;\r\n        position: relative;\r\n        top: 40px;\r\n    }\r\n    button {\r\n        position: relative;\r\n        left: 50%;\r\n        margin-left: -111px;\r\n        margin-top: 200px;\r\n    }\r\n`\r\nconst ReplyFloatingButton = css `\r\n    width: 140px;\r\n    height: 35px;\r\n    line-height: 33px;\r\n    bottom: 15px;\r\n    position: absolute;\r\n    right: 10px;\r\n    float: right;\r\n    div { display: inline-block; }\r\n    div:first-of-type {\r\n        position: relative;\r\n        right: 10px;\r\n        width: 100px;\r\n        text-align: right;\r\n    }\r\n    div:last-of-type {\r\n        width: 30%;\r\n        box-shadow: 0 0 10px #dbdbdb;\r\n        float: right;\r\n        background-color: #fff;\r\n        border-radius: 35px;\r\n        width: 35px;\r\n        height: 35px;\r\n        position: absolute;\r\n        cursor: pointer;\r\n        &:hover {\r\n            background-color: #dbdbdb;\r\n        }\r\n        span {\r\n            position: relative;\r\n            top: 7px;\r\n            left: 6px;\r\n        }\r\n    }\r\n`\r\n\r\n\r\n\r\nexport {\r\n    Board,\r\n    ButtonSet,\r\n    BoardRead,\r\n    BoardWrite,\r\n    NormalButton,\r\n    KakaoButton,\r\n    ReplyFloatingButton\r\n}","const TimeToString = (time: string) => {\r\n  const now: Date = new Date()\r\n  const reg_time: Date = new Date(time)\r\n  let string\r\n\r\n  let diff = now.getTime() - reg_time.getTime()\r\n  let days = Math.floor((diff / (1000 * 60 * 60 * 24)))\r\n  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n  //let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\r\n  //let seconds = Math.floor((diff % (1000 * 60)) / (1000))\r\n  if(days > 0){\r\n    string = days + '일전'\r\n  }else if(hours > 1 && days === 0){\r\n    string = hours + '시간전'\r\n  }else{\r\n    string = '방금전'\r\n  }\r\n\r\n  return string\r\n}\r\n\r\nexport default TimeToString","import React, { useState, useEffect } from 'react'\r\nimport { Board, ButtonSet } from '../emotion/BlindBoard'\r\nimport { Link } from 'react-router-dom'\r\nimport TimeToString from './Common'\r\n \r\nlet listMax = 10\r\n\r\nconst BlindBoard = () => { \r\n  let [list, setList]: any = useState([])  \r\n  let [total, setTotal]: any = useState([])\r\n\r\n  useEffect(() => { \r\n    listMax = 10\r\n    const GetList = async () => {\r\n      const response = await fetch(process.env.REACT_APP_URL + '/init')\r\n      let json = await response.json()\r\n      setTotal(json)\r\n      setList(json.filter((v: string | number, i: number) => i < listMax))\r\n    }\r\n    GetList()\r\n  }, [])\r\n\r\n  const Prev = () => {\r\n    if(listMax > 10) {\r\n      listMax -= 10\r\n      setList(total.filter((v: string | number, i: number) => i < listMax)\r\n      .filter((v2: string | number, i2: number) => i2 >= listMax - 10))\r\n    }\r\n  }\r\n\r\n  const Next = () => {\r\n    if(listMax < total.length) {\r\n      setList(total.filter((v: string | number, i: number) => i >= listMax)\r\n      .filter((v2: string | number, i2: number) => i2 < 10))\r\n      listMax += 10\r\n    }\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\">\r\n        {list.map((v: any, i:any) => (\r\n          <ul key={v.id} data-id={v.id}>\r\n            <Link to={`/read/${v.id}`}>\r\n              <li>{v.title.length > 26 ? v.title.substr(0, 20) + '...' : v.title}</li>\r\n              <li>{v.author}</li>\r\n              <li>{TimeToString(v.time)}</li>\r\n            </Link>\r\n          </ul>\r\n        ))}\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\" onClick={Prev}>chevron_left</span>\r\n          <Link to='/write'>\r\n            <span className=\"material-icons\">edit</span>\r\n          </Link>\r\n          <span className=\"material-icons\" onClick={Next}>chevron_right</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoard","import { css } from '@emotion/react'\r\nimport { NormalButton } from './BlindBoard'\r\n\r\nconst breakpoints = [320, 568]\r\n\r\nconst media = breakpoints.map( bp => `@media (min-width: ${bp}px)` )\r\n\r\nconst ModalWrapper = css`\r\n    text-align: center;\r\n    width: 300px;\r\n    height: 150px;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    margin-left: -150px;\r\n    margin-top: -75px;\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    z-index: 1000;\r\n    border-radius: 10px;\r\n    div:first-of-type {\r\n        width: 100%;\r\n        height: 80px;\r\n        line-height: 80px;\r\n    }\r\n    div:last-of-type {\r\n        width: 100%;\r\n        height: 70px;\r\n        line-height: 70px;\r\n        button{\r\n            ${NormalButton}\r\n        }\r\n    }\r\n\r\n`\r\nconst ModalOverlay = css`\r\n    box-sizing: border-box;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    z-index: 999;\r\n`\r\n\r\nconst ReplyModalWrapper = css`\r\n    text-align: center;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    ${media[0]} { width: 90vw; margin-left: -45vw; height: 85vh; margin-top: -42.5vh;}\r\n    ${media[1]} { width: 30vw; margin-left: -15vw; height: 460px; margin-top: -230px;}\r\n    background-color: rgba(255, 255, 255, 0.7);\r\n    z-index: 1000;\r\n    border-radius: 10px;\r\n    .reply-container{\r\n        padding-top: 10px;\r\n        box-sizing: border-box;\r\n        ${media[0]} { height: 67vh; }\r\n        ${media[1]} { height: 320px; }\r\n        overflow: scroll;\r\n        &::-webkit-scrollbar { \r\n            display: none;\r\n        }\r\n    }\r\n    .reply-wrapper {\r\n        \r\n    }\r\n    .reply-header {\r\n        width: 100%;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        div{ float: left; width: 50%; }\r\n        div:first-of-type { text-align: left; padding-left: 30px; box-sizing: border-box; }\r\n        div:last-of-type { text-align: right; padding-right: 30px; box-sizing: border-box; }\r\n    }\r\n    .reply-contents {\r\n        text-align: left;\r\n        padding-left: 30px;\r\n        box-sizing: border-box;\r\n    }\r\n    .reply-write-set {\r\n        width: 100%;\r\n        height: 80px;\r\n        margin-top: 10px;\r\n        textarea{\r\n            height: 80px;\r\n            border: none;\r\n            border-radius: 10px;\r\n            resize: none;\r\n            padding: 10px;\r\n            :focus {\r\n                outline: none;\r\n            }\r\n            ${media[0]} { width: 85vw; }\r\n            ${media[1]} { width: 27.5vw; }\r\n            box-sizing: border-box;\r\n        }\r\n    }\r\n    .no-reply {\r\n        margin-top: 150px;\r\n    }\r\n    .reply-modal-button-set {\r\n        width: 100%;\r\n        height: 42px;\r\n        line-height: 42px;\r\n        button{\r\n            ${NormalButton}\r\n            margin: 0px 3px 0px 3px;\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport {\r\n    ModalWrapper, ModalOverlay, ReplyModalWrapper\r\n}","let flag: boolean\r\n\r\nconst BlankCheck = (content: string | undefined) => {\r\n    content?.length === 0 ? flag = false : flag = true\r\n    return flag\r\n}\r\n  \r\nexport default BlankCheck","import React, { useEffect, useState, useRef } from 'react'\r\nimport { Board, ButtonSet, BoardRead, ReplyFloatingButton } from '../emotion/BlindBoard'\r\nimport { ModalOverlay, ReplyModalWrapper } from '../emotion/Modal'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport TimeToString from './Common'\r\nimport BlankCheck from './Validation'\r\n\r\ninterface MatchParams {\r\n  id: string\r\n}\r\n\r\nconst BlindBoardRead = ({match}: RouteComponentProps<MatchParams>) => { \r\n  let [content, setContent]: any = useState([])  \r\n  let [reply_count, setReplyCount]: any = useState(0)  \r\n  let [reply_contents, setReplyContents]: any = useState([])  \r\n  let [visible, setVisible]: any = useState(false)\r\n  let [add_reply_content, setAddReplyContent]: any = useState(null)\r\n\r\n  const textareaEl = useRef<HTMLTextAreaElement>(null)\r\n\r\n  useEffect(() => { \r\n\r\n    // Promise.all([\r\n    //   fetch('http://localhost:3000/backend/reply/count/' + match.params.id),\r\n    //   fetch('http://localhost:3000/backend/read/' + match.params.id)\r\n    // ]).then(async([response]) => {\r\n    //   let json = await response.json()\r\n    //   console.log(json)\r\n    // }).catch((err) => {\r\n    //   console.log(err)\r\n    // })\r\n    const ReadContent = async () => {\r\n      const response = await fetch(process.env.REACT_APP_URL + '/backend/read/' + match.params.id)\r\n      let json = await response.json()\r\n      setContent(json[0])\r\n    }\r\n    const ReplyCount = async () => {\r\n      const response = await fetch(process.env.REACT_APP_URL + '/backend/reply/count/' + match.params.id)\r\n      let json = await response.json()\r\n      setReplyCount(json[0][0].count)\r\n    }\r\n    ReadContent()\r\n    ReplyCount()\r\n  }, [match.params.id])\r\n\r\n  const OpenReplyModal = async() => {\r\n    const response = await fetch(process.env.REACT_APP_URL + '/backend/reply/read/' + match.params.id)\r\n    let json = await response.json()\r\n    setReplyContents(json)  \r\n    setVisible(true)\r\n  }\r\n\r\n  const ReplyWrite = async () => {\r\n    \r\n    const namelist = {\r\n      firstname: ['작은', '큰', '귀여운', '푸른', '붉은', '파란', '바보', '멍청한', '미친', '아기', '강철의'],\r\n      lastname: ['곰', '상자', '뱀', '상어', '닝겐', '사람', '연금술사', '소보루', '멍청이', '아빠', '부장님']\r\n    }\r\n    const firstrandom = Math.floor(Math.random() * (namelist.firstname.length - 0) + 0)\r\n    const lastrandom = Math.floor(Math.random() * (namelist.lastname.length - 0) + 0)\r\n    const nickname = namelist.firstname[firstrandom] + ' ' + namelist.lastname[lastrandom]\r\n\r\n    type Data = {\r\n      list_id: number | undefined,\r\n      author: string | undefined,\r\n      content: string | undefined\r\n    }\r\n\r\n    const data: Data = {\r\n      list_id: Number(match.params.id),\r\n      author: nickname,\r\n      content: textareaEl.current?.value.replace(/'/g, \"\\\\'\")\r\n    }\r\n\r\n    if(!BlankCheck(data.content)){\r\n      let textarea: any = document.querySelector('textarea')\r\n      let animation_count = 0\r\n      let rotate_count = 0\r\n      let flag = false\r\n      \r\n      const run = () => {\r\n         if(rotate_count < 4 && flag === false) {\r\n          rotate_count++\r\n          if(rotate_count === 4) {\r\n            flag = true\r\n            animation_count++\r\n          }\r\n         }\r\n         if(rotate_count > -4 && flag === true) {\r\n           rotate_count--\r\n           if(rotate_count === -4) {\r\n             flag = false\r\n             animation_count++\r\n           }\r\n         }\r\n\r\n        if(animation_count === 5) {\r\n          textarea.style.transform = 'rotate(0deg)'\r\n          return\r\n        }\r\n        \r\n        textarea.style.transform = 'rotate(' + rotate_count + 'deg)'\r\n        requestAnimationFrame(run)\r\n      }\r\n      \r\n      requestAnimationFrame(run)\r\n      return false\r\n    }\r\n\r\n    const response = await fetch(process.env.REACT_APP_URL + '/backend/reply/write', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n\r\n    const result = await response.json()\r\n    if(result.message === 'Success') {\r\n      setAddReplyContent(data)\r\n      setReplyCount(1)\r\n    }\r\n  }\r\n\r\n  const ReplyModal = () => {\r\n    return (\r\n      <div id=\"ReplyModal\">\r\n      <div css={ModalOverlay}></div>\r\n        <div css={ReplyModalWrapper}>\r\n          <div className=\"reply-container\">\r\n            {reply_count !== 0 ? reply_contents.map((v: any, i:any) => (\r\n              <div className=\"reply-wrapper\" key={v.id}>\r\n                <div className=\"reply-header\">\r\n                  <div>{v.author}</div>\r\n                  <div>{TimeToString(v.time)}</div>\r\n                </div>\r\n                <div className=\"reply-contents\">\r\n                  <pre>\r\n                    {v.content}\r\n                  </pre>\r\n                </div>\r\n              </div>\r\n            )): <div className=\"no-reply\">아직 댓글이 달리지 않았습니다. <br />댓글을 작성해주세요😙</div>}\r\n            {add_reply_content !== null ?\r\n              <div className=\"reply-wrapper\">\r\n                <div className=\"reply-header\">\r\n                  <div>{add_reply_content.author}</div>\r\n                  <div>{TimeToString(add_reply_content.time)}</div>\r\n                </div>\r\n                <div className=\"reply-contents\">\r\n                  <pre>{add_reply_content.content}</pre>\r\n                </div>\r\n              </div>\r\n            : null}\r\n          </div>\r\n          <div className=\"reply-write-set\">\r\n            <textarea placeholder=\"내용을 작성해주세요\" ref={textareaEl}></textarea>\r\n            <div className=\"reply-modal-button-set\">\r\n              <button onClick={ReplyWrite}>작성</button>\r\n              <button onClick={CloseReplyModal}>닫기</button>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  const CloseReplyModal = () => {\r\n    setVisible(false)\r\n    setAddReplyContent(null)\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\" css={BoardRead}>\r\n        <div className=\"content-title\">{content.title}</div>\r\n        <div className=\"content-body\">\r\n          <span>{content.author}</span>\r\n          <span>{TimeToString(content.time)}</span>\r\n        </div>\r\n        <div>\r\n          <pre>{content.content}</pre>\r\n          <div css={ReplyFloatingButton}>\r\n          <div>{reply_count}개의 댓글</div>\r\n          <div>\r\n            <span className=\"material-icons md-24\" onClick={OpenReplyModal}>quickreply</span>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      {visible ?\r\n        <ReplyModal />\r\n      : null}\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardRead","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { ModalWrapper, ModalOverlay } from '../emotion/Modal'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useModalDispatch } from '../context/ModalContext'\r\n\r\nconst Modal = (props: any) => {\r\n\r\n    let history = useHistory()\r\n    let ModalButton: any\r\n    const el = document.getElementById(\"modal-root\")\r\n    const dispatch = useModalDispatch()\r\n\r\n    const MoveRoute = () => {\r\n        dispatch({ type: 'SET_VISIBLE', visible: false })\r\n        history.push('/')\r\n    }\r\n\r\n    const Route = () => {\r\n        return <button onClick={MoveRoute}>확인</button>\r\n    }\r\n\r\n    const Normal = () => {\r\n        return <button onClick={()=> dispatch({ type: 'SET_VISIBLE', visible: false })}>확인</button>\r\n    }\r\n\r\n    switch(props.type) {\r\n        case 'Route':\r\n            ModalButton = Route\r\n        break\r\n        case 'Normal':\r\n            ModalButton = Normal\r\n    }\r\n\r\n    return el ? ReactDOM.createPortal(\r\n        props.visible?\r\n        <div>\r\n            <div css={ModalOverlay}></div>\r\n            <div css={ModalWrapper}>\r\n                <div>{props.children}</div>\r\n                <div><ModalButton /></div>\r\n            </div>\r\n        </div>\r\n        : null, el\r\n    ) : null\r\n\r\n}\r\n\r\nexport default Modal","import React, { useReducer, useContext, createContext, Dispatch } from 'react'\r\nimport Modal from '../components/Modal'\r\n\r\ntype State = {\r\n  visible: boolean\r\n  modal_type: string,\r\n  message: string\r\n}\r\n\r\ntype Action =\r\n  | { type: 'SET_MODAL_TYPE'; modal_type: string }\r\n  | { type: 'SET_MESSAGE'; message: string }\r\n  | { type: 'SET_VISIBLE'; visible: boolean }\r\n\r\ntype ModalDispatch = Dispatch<Action>\r\n\r\nconst ModalStateContext = createContext<State | null>(null)\r\nconst ModalDispatchContext = createContext<ModalDispatch | null>(null)\r\n\r\nconst Reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'SET_MODAL_TYPE':\r\n      return {\r\n        ...state,\r\n        modal_type: action.modal_type \r\n      }\r\n    case 'SET_MESSAGE':\r\n      return {\r\n        ...state,\r\n        message: action.message \r\n      }\r\n    case 'SET_VISIBLE':\r\n      return {\r\n        ...state,\r\n        visible: action.visible\r\n      }\r\n    default:\r\n      throw new Error('Unhandled action')\r\n  }\r\n}\r\n\r\nexport const ModalProvider = ({ children }: { children: React.ReactNode }) => {\r\n  let [state, dispatch] = useReducer(Reducer, {\r\n    modal_type: 'Normal',\r\n    message: '',\r\n    visible: false\r\n  })\r\n\r\n  return (\r\n    <ModalStateContext.Provider value={state}>\r\n      <ModalDispatchContext.Provider value={dispatch}>\r\n        <Modal type={state.modal_type} visible={state.visible}>{state.message}</Modal>{children}\r\n      </ModalDispatchContext.Provider>\r\n    </ModalStateContext.Provider>\r\n  )\r\n}\r\n\r\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\r\nexport const useModalState = () => {\r\n  const state = useContext(ModalStateContext)\r\n  if (!state) throw new Error('Cannot find ModalProvider')\r\n  return state\r\n}\r\n\r\nexport const useModalDispatch = () => {\r\n  const dispatch = useContext(ModalDispatchContext)\r\n  if (!dispatch) throw new Error('Cannot find ModalProvider')\r\n  return dispatch\r\n}","import React, { useReducer, useContext, createContext, Dispatch } from 'react'\r\n\r\ntype State = {\r\n  token: string\r\n}\r\n\r\ntype Action =\r\n  | { type: 'SET_TOKEN'; token: string }\r\n\r\ntype TokenDispatch = Dispatch<Action>\r\n\r\nconst TokenStateContext = createContext<State | null>(null)\r\nconst TokenDispatchContext = createContext<TokenDispatch | null>(null)\r\n\r\nconst Reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'SET_TOKEN':\r\n      return {\r\n        ...state,\r\n        token: action.token \r\n      }\r\n    default:\r\n      throw new Error('Unhandled action')\r\n  }\r\n}\r\n\r\nexport const TokenProvider = ({ children }: { children: React.ReactNode }) => {\r\n  let [state, dispatch] = useReducer(Reducer, {\r\n    token: 'Not Set'\r\n  })\r\n  \r\n    return (\r\n      <TokenStateContext.Provider value={state}>\r\n        <TokenDispatchContext.Provider value={dispatch}>\r\n          {children}\r\n        </TokenDispatchContext.Provider>\r\n      </TokenStateContext.Provider>\r\n    )\r\n}\r\n\r\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\r\nexport const useTokenState = () => {\r\n  const state = useContext(TokenStateContext)\r\n  if (!state) throw new Error('Cannot find TokenProvider')\r\n  return state\r\n}\r\n\r\nexport const useTokenDispatch = () => {\r\n  const dispatch = useContext(TokenDispatchContext)\r\n  if (!dispatch) throw new Error('Cannot find TokenProvider')\r\n  return dispatch\r\n}","import React, { useEffect, useRef } from 'react'\r\nimport { Board, ButtonSet, BoardWrite } from '../emotion/BlindBoard'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { useModalDispatch } from '../context/ModalContext'\r\nimport { useTokenState } from '../context/TokenContext'\r\nimport BlankCheck from './Validation'\r\n\r\nconst BlindBoardWrite = () => { \r\n\r\n  const dispatch = useModalDispatch()\r\n  const inputEl = useRef<HTMLInputElement>(null)\r\n  const textareaEl = useRef<HTMLTextAreaElement>(null)\r\n\r\n  useEffect(() => { \r\n    inputEl.current?.focus()\r\n  }, [inputEl])\r\n\r\n  const Write = async () => {\r\n    \r\n    const namelist = {\r\n      firstname: ['작은', '큰', '귀여운', '푸른', '붉은', '파란', '바보', '멍청한', '미친', '아기', '강철의'],\r\n      lastname: ['곰', '상자', '뱀', '상어', '닝겐', '사람', '연금술사', '소보루', '멍청이', '아빠', '부장님']\r\n    }\r\n    const firstrandom = Math.floor(Math.random() * (namelist.firstname.length - 0) + 0)\r\n    const lastrandom = Math.floor(Math.random() * (namelist.lastname.length - 0) + 0)\r\n    const nickname = namelist.firstname[firstrandom] + ' ' + namelist.lastname[lastrandom]\r\n\r\n    type Data = {\r\n      title: string | undefined,\r\n      author: string | undefined,\r\n      content: string | undefined\r\n    }\r\n\r\n    const data: Data = {\r\n      title: inputEl.current?.value.replace(/'/g, \"\\\\'\"),\r\n      author: nickname,\r\n      content: textareaEl.current?.value.replace(/'/g, \"\\\\'\")\r\n    }\r\n\r\n    if(!BlankCheck(data.title) || !BlankCheck(data.content)){\r\n      dispatch({ type: 'SET_VISIBLE', visible: true })\r\n      dispatch({ type: 'SET_MODAL_TYPE', modal_type: 'Normal' })\r\n      dispatch({ type: 'SET_MESSAGE', message: '내용을 입력하지 않았습니다..😅' })\r\n      return false\r\n    }\r\n\r\n    const response = await fetch(process.env.REACT_APP_URL + '/backend/write', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n\r\n    const result = await response.json()\r\n    if(result.message === 'Success') {\r\n      dispatch({ type: 'SET_VISIBLE', visible: true })\r\n      dispatch({ type: 'SET_MODAL_TYPE', modal_type: 'Route' })\r\n      dispatch({ type: 'SET_MESSAGE', message: '작성이 완료되었습니다😀' })\r\n    }\r\n  }\r\n\r\n  return (  \r\n    useTokenState().token === 'Not Set'\r\n    ?\r\n    <Redirect to='/signin' />\r\n    :\r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\" css={BoardWrite}>\r\n        <div>\r\n          <input ref={inputEl} type=\"text\" placeholder=\"제목을 입력하세요\"/>\r\n        </div>\r\n        <div>\r\n\r\n        </div>\r\n        <div>\r\n          <textarea placeholder=\"내용을 작성해주세요\" ref={textareaEl}></textarea>\r\n        </div>\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\" onClick={Write}>create</span>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardWrite","import React from 'react'\r\nimport { Board, ButtonSet, KakaoButton } from '../emotion/BlindBoard'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport KakaoLogin from 'react-kakao-login'\r\nimport { useTokenDispatch } from '../context/TokenContext'\r\n\r\nconst token: any = process.env.REACT_APP_KAKAO_KEY\r\n\r\nconst BlindBoardSignin = () => { \r\n  \r\n  const dispatch = useTokenDispatch()\r\n  let history = useHistory()\r\n\r\n  const Next = (res: any) => {\r\n    // res => profile => id: 15215152, connected_at: 2020-12-05T09:52:00\r\n    // res => response => access_token, expire_in: 7199, refresh_token, token_type: bearer\r\n    dispatch({ type: 'SET_TOKEN', token: res.response.access_token })\r\n    history.push('/write')\r\n  }\r\n\r\n  return (  \r\n    <div id=\"BlindBoard\" css={Board}>\r\n      <div id=\"BoardHeader\">\r\n        <h1>익명의 사내게시판📄</h1>\r\n      </div>\r\n      <div id=\"Board\" css={KakaoButton}>\r\n        <p>글을 작성하려면 로그인이 필요합니다😀</p>\r\n        <KakaoLogin token={token} onSuccess={Next} onFail={console.error} onLogout={console.info}>카카오계정으로 로그인</KakaoLogin>\r\n      </div>\r\n      <div id=\"BoardFooter\">\r\n        <div css={ButtonSet}>\r\n          <span className=\"material-icons\">create</span>\r\n          <Link to='/'>\r\n            <span className=\"material-icons\">list</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default BlindBoardSignin","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport BlindBoard from './components/BlindBoard'\r\nimport BlindBoardRead from './components/BlindBoardRead'\r\nimport BlindBoardWrite from './components/BlindBoardWrite'\r\nimport BlindBoardSignin from './components/BlindBoardSignin'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\nimport { ModalProvider } from './context/ModalContext'\r\nimport { TokenProvider } from './context/TokenContext'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename=\"/blindboard\">\r\n    <Switch>\r\n      <TokenProvider>\r\n        <Route exact path='/' component={BlindBoard} />\r\n        <ModalProvider>\r\n          <Route path='/signin' component={BlindBoardSignin} />\r\n          <Route path='/write' component={BlindBoardWrite} />\r\n          <Route path='/read/:id' component={BlindBoardRead} />\r\n        </ModalProvider>\r\n      </TokenProvider>\r\n    </Switch>\r\n  </BrowserRouter>\r\n  ,document.getElementById('root')\r\n)"],"sourceRoot":""}